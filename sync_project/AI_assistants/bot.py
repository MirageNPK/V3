import sys
import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Document,ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sync_project.settings')
import django

django.setup()
from AI_assistants.models import TrainingMaterial
from nontion_sync.models import Project, NotionOrders
from django.db import models
from django.db.models import QuerySet
from asgiref.sync import sync_to_async
import pandas as pd
from googleapiclient.discovery import build
from docx import Document as DocxDocument
from PyPDF2 import PdfReader
import openai
from telegram.ext import CallbackContext
from django.conf import settings

BOT_TOKEN = settings.BOT_TOKEN
OPENAI_API_KEY = settings.OPENAI_API_KEY
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¢–ó", callback_data="upload_tz")],
        [InlineKeyboardButton("üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–≤—á. –º–∞—Ç.", callback_data="upload_material")],
        [InlineKeyboardButton("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ AI", callback_data="consult_ai")],
        [InlineKeyboardButton("üéØ –ù–∞–ø–∏—Å–∞—Ç–∏ SMART-—Ü—ñ–ª—ñ", callback_data="smart_goals")],
        [InlineKeyboardButton("üìÇ –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –∑ –æ—Ä–¥–µ—Ä–∞–º–∏", callback_data="generate_orders_file")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?", reply_markup=reply_markup)


async def get_projects():
    return await sync_to_async(list)(Project.objects.all())


# –í–∏–∑–Ω–∞—á—Ç–µ —Å—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
WAITING_PROJECT_NAME = 1
WAITING_FOR_DATE = 1

async def create_new_project(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É:")
    return WAITING_PROJECT_NAME

async def handle_new_project_name(update: Update, context: CallbackContext):
    project_name = update.message.text
    try:
        new_project = await sync_to_async(Project.objects.create)(name=project_name)
        context.user_data["selected_project"] = new_project.id
        await update.message.reply_text(
            f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó —É —Ñ–æ—Ä–º–∞—Ç—ñ .docx, .pdf, .xlsx –∞–±–æ .csv"
        )
    except Exception as e:
        logging.error(f"Error creating project: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return ConversationHandler.END


async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == "upload_tz":
        # await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ—î–∫—Ç—É –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
        projects = await get_projects()
        keyboard = [[InlineKeyboardButton(project.name, callback_data=f"project_{project.id}")] for project in projects]
        keyboard.append([InlineKeyboardButton("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç", callback_data="create_new_project")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ–µ–∫—Ç –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π:", reply_markup=reply_markup)
    
    elif query.data.startswith("project_"):
        project_id = int(query.data.split("_")[1])
        context.user_data["selected_project"] = project_id
        await query.message.reply_text("–¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó —É —Ñ–æ—Ä–º–∞—Ç—ñ .docx, .pdf, .xlsx, .csv")
    
    elif query.data == "create_new_project":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É:")

    elif query.data == "upload_material":
        await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É.")    
    elif query.data == "consult_ai":
        await query.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!")
    
    elif query.data == "smart_goals":
        projects = await get_projects()
        keyboard = [[InlineKeyboardButton(project.name, callback_data=f"smart_goals_project_{project.id}")] for project in projects]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SMART-—Ü—ñ–ª–µ–π:", reply_markup=reply_markup)
    elif query.data == "generate_orders_file":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —ñ —Ä—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ MM.YYYY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.2025):")
        return WAITING_FOR_DATE

async def handle_date_input(update: Update, context):
    user_input = update.message.text.strip()

    # –û—á–∏—Å—Ç–∫–∞ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
    user_input = user_input.replace(" ", "")
    
    if not user_input or len(user_input) != 7 or user_input[2] != ".":
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ MM.YYYY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.2025). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return WAITING_FOR_DATE

    try:
        month, year = map(int, user_input.split("."))
        if not (1 <= month <= 12):
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –º—ñ—Å—è—Ü—è.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ MM.YYYY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.2025). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return WAITING_FOR_DATE

    # –ü–æ—à—É–∫ –æ—Ä–¥–µ—Ä—ñ–≤ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –º—ñ—Å—è—Ü—å —Ç–∞ —Ä—ñ–∫
    orders = await sync_to_async(list)(NotionOrders.objects.filter(finish_date__year=year, finish_date__month=month))
    if not orders:
        await update.message.reply_text("‚ùå –î–∞–Ω–∏—Ö –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ–º–∞—î.")
        return ConversationHandler.END

    # –§–æ—Ä–º—É—î–º–æ Excel-—Ñ–∞–π–ª
    file_path = await generate_orders_excel(orders, month, year)
    await update.message.reply_document(document=open(file_path, "rb"), filename=os.path.basename(file_path))
    return ConversationHandler.END

async def generate_orders_excel(orders, month, year):
    df = pd.DataFrame.from_records([
        {
            "–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è": order.name,
            "–ù–∞–∑–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è": order.service_name,
            "–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è": order.description,
            "–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó, —â–æ –∑–∞–º–æ–≤–ª—è—î –ø–æ—Å–ª—É–≥—É": order.business_unit,
            "–ù–∞–ø—Ä—è–º–æ–∫ Netpeak Core": order.team,
            "–¢–∏–ø —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥ –º—ñ–∂ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏ NG": order.cost_allocation_type,
            "–†–æ–∑–ø–æ–¥—ñ–ª –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏ –º—ñ–∂ –∫–æ–º–ø–∞–Ωi—è–º–∏ NG": order.cost_allocation,
            "–î–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤–∏–∫–æ–Ω–∞–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏": order.finish_date.strftime("%d.%m.%Y") if order.finish_date else "",
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è": order.responsible,
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö –ø–æ—Å–ª—É–≥ / –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏ –Ω–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º": order.hours_unit,
            "–°—Ç–∞—Ç—É—Å": order.status
        } for order in orders
    ])
    
    file_path = f"orders_{month:02d}_{year}.xlsx"
    df.to_excel(file_path, index=False)
    return file_path

async def handle_document(update: Update, context):
    document = update.message.document
    file = await context.bot.get_file(document.file_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    download_folder = os.path.join(os.getcwd(), "downloads")
    os.makedirs(download_folder, exist_ok=True)

    # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    file_path = os.path.join(download_folder, document.file_name)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    await file.download_to_drive(file_path)

    # –í–∏–∫–ª–∏–∫ parse_document –±–µ–∑ await (–±–æ —Ü–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
    extracted_text = await sync_to_async(parse_document)(file_path, document.file_name)

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
    telegram_user_id = str(update.message.from_user.id)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ –ø—Ä–æ—î–∫—Ç (—è–∫—â–æ —î, —Ü–µ –¢–ó, —è–∫—â–æ –Ω—ñ ‚Äî –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª)
    if "selected_project" in context.user_data:
        project_id = context.user_data["selected_project"]
        direction = "project"
    else:
        project_id = None
        direction = "general"

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    await sync_to_async(TrainingMaterial.objects.create)(
        name=document.file_name,  # –ù–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        direction=direction,  # "project" –∞–±–æ "general"
        content=extracted_text,  # –¢–µ–∫—Å—Ç
        telegram_user_id=telegram_user_id,  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        project_id=project_id,  # ID –ø—Ä–æ—î–∫—Ç—É –∞–±–æ None
    )

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if direction == "project":
        await update.message.reply_text("–¢–ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ. AI –∞–Ω–∞–ª—ñ–∑—É—î –¥–æ–∫—É–º–µ–Ω—Ç...")
        analysis = await analyze_tz_with_ai(extracted_text)
        await update.message.reply_text(f"AI –≤—Ä–∞–∂–µ–Ω–Ω—è: {analysis}")
    else:
        await update.message.reply_text("–ù–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! ‚úÖ")



async def handle_ai_consult(update: Update, context):
    user_question = update.message.text
    response = await ask_gpt_analysis(user_question)
    await update.message.reply_text(response)


def parse_document(file_path, file_name):
    if file_name.endswith(".docx"):
        doc = DocxDocument(file_path)
        return "\n".join([p.text for p in doc.paragraphs])
    elif file_name.endswith(".pdf"):
        reader = PdfReader(file_path)
        return "\n".join([page.extract_text() for page in reader.pages])
    elif file_name.endswith(".xlsx") or file_name.endswith(".csv"):
        df = pd.read_excel(file_path) if file_name.endswith(".xlsx") else pd.read_csv(file_path)
        return df.to_string()
    return "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç"


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¢–ó –∑ —Ä–æ–∑–±–∏—Ç—Ç—è–º –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
async def analyze_tz_with_ai(text):
    max_tokens = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –∑–∞–ø–∏—Ç –¥–æ GPT
    paragraphs = text.split("\n")  # –†–æ–∑–±–∏–≤–∞—î–º–æ –¢–ó –ø–æ –∞–±–∑–∞—Ü–∞—Ö
    parts = []
    current_part = []

    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —â–æ–± –∫–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞–ª–∞ –ª—ñ–º—ñ—Ç
    for paragraph in paragraphs:
        current_part.append(paragraph)
        if len(" ".join(current_part)) > max_tokens:
            parts.append(" ".join(current_part[:-1]))  # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —á–∞—Å—Ç–∏–Ω—É
            current_part = [paragraph]  # –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤—É —á–∞—Å—Ç–∏–Ω—É

    if current_part:
        parts.append(" ".join(current_part))  # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ –¥–æ GPT —ñ –∑–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results = []
    for part in parts:
        response = await ask_gpt_analysis(part)
        results.append(response)

    # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    return "\n\n".join(results)



async def ask_gpt_analysis(question):
    openai.api_key = OPENAI_API_KEY
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢–∏ ‚Äì –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ø—Ä–æ—î–∫—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ –º–µ—Ç–∞ ‚Äì –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ, –∞–Ω–∞–ª—ñ–∑—ñ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç–∞–º–∏. –¢–∏ –∞–Ω–∞–ª—ñ–∑—É—î—à —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó), —Ñ–æ—Ä–º—É—î—à SMART-—Ü—ñ–ª—ñ, –ø—Ä–æ–ø–æ–Ω—É—î—à –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, –æ—Ü—ñ–Ω—é—î—à —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ä–∏–∑–∏–∫–∏ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä—ñ—à–µ–Ω—å.–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞–¥–∞–π —á—ñ—Ç–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥–∏–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç–∞–º–∏ (PMBOK, Agile, Scrum, Kanban) —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ (ROI, NPV, —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–µ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è). –Ø–∫—â–æ –∞–Ω–∞–ª—ñ–∑—É—î—à –¢–ó, –∑–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞:‚úÖ –õ–æ–≥—ñ–∫—É, —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å —ñ —á—ñ—Ç–∫—ñ—Å—Ç—å –≤–∏–º–æ–≥, ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å SMART-—Ü—ñ–ª—è–º, ‚úÖ –§—ñ–Ω–∞–Ω—Å–æ–≤—É –¥–æ—Ü—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —Ä–∏–∑–∏–∫–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ, –±–µ–∑ –∑–∞–π–≤–æ—ó –≤–æ–¥–∏, –æ—Ä—ñ—î–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ‚Äì –∑–∞–ø–∏—Ç—É–π –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.."},
            {"role": "user", "content": question}
        ]
    )
    return response["choices"][0]["message"]["content"].strip()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –∑–∞ ID
@sync_to_async
def get_tz_for_project(project_id: int):
    try:
        return list(TrainingMaterial.objects.filter(project_id=project_id))
    except Exception as e:
        logging.error(f"Error getting TZ for project {project_id}: {e}")
        return []

@sync_to_async
def get_project_by_id(project_id: int):
    try:
        return Project.objects.get(id=project_id)
    except Project.DoesNotExist:
        return None
    except Exception as e:
        logging.error(f"Error getting project {project_id}: {e}")
        return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¢–ó –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
async def project_has_tz(project_id: int) -> bool:
    tz_list = await get_tz_for_project(project_id)
    return len(tz_list) > 0

# –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è SMART —Ü—ñ–ª–µ–π
async def smart_goals_handler(update: Update, context: CallbackContext):
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        callback_data = update.callback_query.data

        if callback_data.startswith('smart_goals_project_'):
            project_id = int(callback_data.split('_')[-1])

            if await project_has_tz(project_id):
                await update.callback_query.answer()
                await handle_smart_goals_for_project(project_id, update, context)
            else:
                await update.callback_query.answer()
                await context.bot.send_message(
                    user_id, 
                    "–¶–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–∞—î —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó), —Ç–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ SMART —Ü—ñ–ª—ñ."
                )
    
    elif update.message:
        user_id = update.message.from_user.id
        projects = await sync_to_async(list)(Project.objects.all())
        keyboard = [
            [InlineKeyboardButton(project.name, callback_data=f"smart_goals_project_{project.id}")] 
            for project in projects
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è SMART —Ü—ñ–ª–µ–π:", 
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ SMART —Ü—ñ–ª–µ–π –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
async def handle_smart_goals_for_project(project_id: int, update: Update, context: CallbackContext):
    project = await get_project_by_id(project_id)
    if not project:
        await update.callback_query.message.reply_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    tz_list = await get_tz_for_project(project_id)
    if not tz_list:
        await update.callback_query.message.reply_text(
            "–î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É –Ω–µ–º–∞—î –¢–ó. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è."
        )
        return

    # –û–±'—î–¥–Ω—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫—ñ–ª—å–∫–æ—Ö –¢–ó
    extracted_text = "\n\n".join([tz.content for tz in tz_list])
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¢–ó: {extracted_text[:200]}")

    # –§–æ—Ä–º—É–ª—é—î–º–æ SMART-—Ü—ñ–ª—ñ
    smart_goals = await generate_smart_goals(extracted_text)
    logging.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ SMART-—Ü—ñ–ª—ñ: {smart_goals[:200]}")
    
    await update.callback_query.message.reply_text(
        f"SMART —Ü—ñ–ª—ñ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É '{project.name}':\n\n{smart_goals}"
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó SMART —Ü—ñ–ª–µ–π —á–µ—Ä–µ–∑ GPT
async def generate_smart_goals(tz_text):
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–µ –¢–µ—Ö–Ω—ñ—á–Ω–µ –ó–∞–≤–¥–∞–Ω–Ω—è (–¢–ó) —ñ —Å—Ñ–æ—Ä–º—É–ª—é–π SMART —Ü—ñ–ª—ñ:

    –¢–ó: {tz_text}

    –ü–æ—è—Å–Ω–∏, —è–∫—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ SMART —Ü—ñ–ª—ñ –º–æ–∂–Ω–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ –¢–ó. 
    –¶—ñ–ª—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏:
    - Specific (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ)
    - Measurable (–≤–∏–º—ñ—Ä–Ω—ñ)
    - Achievable (–¥–æ—Å—è–∂–Ω—ñ)
    - Relevant (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ)
    - Time-bound (—Å—Ç—Ä–æ–∫–æ–≤—ñ)
    """
    smart_goals_response = await ask_gpt(prompt)
    return smart_goals_response

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ GPT
async def ask_gpt(prompt: str) -> str:
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è SMART —Ü—ñ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"Error with GPT request: {e}")
        return "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ GPT. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."


def main():
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_new_project, pattern="^create_new_project$")],
        states={
            WAITING_PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_project_name)]
        },
        fallbacks=[],
    )
    conv_handler_btn = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern="^(?!smart_goals_project_).*")],
    states={
        WAITING_FOR_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_input)],
    },
    fallbacks=[],
)

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(conv_handler)
    application.add_handler(conv_handler_btn)
    application.add_handler(CommandHandler("start", start))
    # application.add_handler(CallbackQueryHandler(button_handler, pattern="^(?!smart_goals_project_).*"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_consult))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(CallbackQueryHandler(smart_goals_handler, pattern="^smart_goals_project_"))
    application.add_handler(CallbackQueryHandler(handle_smart_goals_for_project, pattern="^smart_goals_project_"))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex("^.*$"), 
        handle_ai_consult
    ))
    application.run_polling()

if __name__ == "__main__":
    main()