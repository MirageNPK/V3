from multiprocessing import context
import sys
import os
import logging
import asyncio
from urllib import response
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Document,ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sync_project.settings')
import django

django.setup()
from AI_assistants.models import TrainingMaterial, ChatHistory
from nontion_sync.models import Project, NotionOrders, AIgenTask, Parent
from django.db import models
from django.db.models import QuerySet
from asgiref.sync import sync_to_async
import pandas as pd
from googleapiclient.discovery import build
from docx import Document as DocxDocument
from PyPDF2 import PdfReader
import openai
from telegram.ext import CallbackContext
from django.conf import settings
import tiktoken 
import time
import uuid
import re
from django.db import transaction
from typing import List, Dict, Tuple, Any
import hashlib

CHUNK_SIZE = 3000
MAX_CHUNKS = 5
BOT_TOKEN = settings.BOT_TOKEN
OPENAI_API_KEY = settings.OPENAI_API_KEY
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
user_requests_channel_post_reply = {}
BOT_USERNAME = "@MiragePandA_bot"  
AI_CONSULT_MODE = set()
async def handle_mention(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –±–æ—Ç –∑–≥–∞–¥–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ."""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
    if update.message:
        text = update.message.text
        bot_username = (await context.bot.get_me()).username

        if bot_username in text:
            # –Ø–∫—â–æ –∑–≥–∞–¥–∞–Ω–æ –±–æ—Ç–∞, –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–≥–∞–¥–∫–∏
            user_question = text.replace(f"@{bot_username}", "").strip()

            # –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î (—Ç—ñ–ª—å–∫–∏ –∑–≥–∞–¥–∫–∞ –±–æ—Ç–∞)
            if not user_question:
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /start –≤ –∫–∞–Ω–∞–ª—ñ (–¥–ª—è –∫–∞–Ω–∞–ª—É)
                await send_menu_to_channel(update, context)
                return  # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É, —â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —â–µ –æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å

            # –Ø–∫—â–æ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞, –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT
            response = await ask_gpt_analysis(user_question)
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –∫–∞–Ω–∞–ª
            await update.message.reply_text(response)

async def send_menu_to_channel(update: Update, context: CallbackContext):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª."""
    keyboard = [
        [InlineKeyboardButton("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¢–ó", callback_data="upload_tz")],
        [InlineKeyboardButton("üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–≤—á. –º–∞—Ç.", callback_data="upload_material")],
        [InlineKeyboardButton("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ AI", callback_data="consult_ai")],
        [InlineKeyboardButton("üéØ –ù–∞–ø–∏—Å–∞—Ç–∏ SMART-—Ü—ñ–ª—ñ", callback_data="smart_goals")],
        # [InlineKeyboardButton("üìù –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞—Å–∫–∏", callback_data="generate_tasks")],
        [InlineKeyboardButton("üìÇ –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –∑ –æ—Ä–¥–µ—Ä–∞–º–∏", callback_data="generate_orders_file")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_message(
            chat_id=update.message.chat.id,
            text="–ü—Ä–∏–≤—ñ—Ç! –©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª: {e}")

async def start(update: Update, context: CallbackContext):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ –∞–±–æ –≤ –∫–∞–Ω–∞–ª—ñ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '–ü–æ—á–∞—Ç–∏'."""
    keyboard = [
        [InlineKeyboardButton("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¢–ó", callback_data="upload_tz")],
        [InlineKeyboardButton("üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–≤—á. –º–∞—Ç.", callback_data="upload_material")],
        [InlineKeyboardButton("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ AI", callback_data="consult_ai")],
        [InlineKeyboardButton("üéØ –ù–∞–ø–∏—Å–∞—Ç–∏ SMART-—Ü—ñ–ª—ñ", callback_data="smart_goals")],
        [InlineKeyboardButton("üìù –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞—Å–∫–∏", callback_data="generate_tasks")],
        [InlineKeyboardButton("üìÇ –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –∑ –æ—Ä–¥–µ—Ä–∞–º–∏", callback_data="generate_orders_file")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text("–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=reply_markup)

async def handle_mention(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –±–æ—Ç –∑–≥–∞–¥–∞–Ω–æ."""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º
    if update.message:
        text = update.message.text
        bot_username = (await context.bot.get_me()).username

        if bot_username in text:
            # –Ø–∫—â–æ –∑–≥–∞–¥–∞–Ω–æ –±–æ—Ç–∞, –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–≥–∞–¥–∫–∏
            user_question = text.replace(f"@{bot_username}", "").strip()

            # –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î (—Ç—ñ–ª—å–∫–∏ –∑–≥–∞–¥–∫–∞ –±–æ—Ç–∞)
            if not user_question:
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /start (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤)
                await start(update, context)
            else:
                # –ó–∞–ø–∏—Ç –¥–æ GPT
                response = await ask_gpt_analysis(user_question)
                # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                await update.message.reply_text(response)


async def get_projects():
    return await sync_to_async(list)(Project.objects.all())


# –í–∏–∑–Ω–∞—á—Ç–µ —Å—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
WAITING_PROJECT_NAME = 1
WAITING_FOR_DATE = 1
WAITING_FOR_TASKS = 1


async def create_new_project(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É:")
    return WAITING_PROJECT_NAME

async def handle_new_project_name(update: Update, context: CallbackContext):
    project_name = update.message.text
    try:
        new_project = await sync_to_async(Project.objects.create)(name=project_name)
        context.user_data["selected_project"] = new_project.id
        await update.message.reply_text(
            f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó —É —Ñ–æ—Ä–º–∞—Ç—ñ .docx, .pdf, .xlsx –∞–±–æ .csv"
        )
    except Exception as e:
        logging.error(f"Error creating project: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return ConversationHandler.END


async def button_handler(update: Update, context):
    query = update.callback_query
    user_id = query.from_user.id  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    # –ê–∫—Ç–∏–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if query.data == "activate_channel_reply":
        user_requests_channel_post_reply[user_id] = True
        await query.answer()
        await query.edit_message_text("–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä –±–æ—Ç –º–æ–∂–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –≤–∞—à—ñ –ø–æ—Å—Ç–∏.")
    
    elif query.data == "bot_help_in_channel":
        # –Ü–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –≤ –∫–∞–Ω–∞–ª—ñ
        keyboard = [
            [InlineKeyboardButton("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¢–ó", callback_data="upload_tz")],
            [InlineKeyboardButton("üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–≤—á. –º–∞—Ç.", callback_data="upload_material")],
            [InlineKeyboardButton("ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ AI", callback_data="consult_ai")],
            [InlineKeyboardButton("üéØ –ù–∞–ø–∏—Å–∞—Ç–∏ SMART-—Ü—ñ–ª—ñ", callback_data="smart_goals")],
            [InlineKeyboardButton("üìù –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞—Å–∫–∏", callback_data="generate_tasks")],
            [InlineKeyboardButton("üìÇ –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –∑ –æ—Ä–¥–µ—Ä–∞–º–∏", callback_data="generate_orders_file")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏:", reply_markup=reply_markup)

    elif query.data == "upload_tz":
        projects = await get_projects()
        keyboard = [[InlineKeyboardButton(project.name, callback_data=f"project_{project.id}")] for project in projects]
        keyboard.append([InlineKeyboardButton("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç", callback_data="create_new_project")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ–µ–∫—Ç –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π:", reply_markup=reply_markup)
    
    elif query.data.startswith("project_"):
        project_id = int(query.data.split("_")[1])
        context.user_data["selected_project"] = project_id
        await query.message.reply_text("–¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó —É —Ñ–æ—Ä–º–∞—Ç—ñ .docx, .pdf, .xlsx, .csv")
    
    elif query.data == "create_new_project":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É:")

    elif query.data == "upload_material":
        await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É.")    
    elif query.data == "consult_ai":
        await query.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!")
    
    elif query.data == "smart_goals":
        projects = await get_projects()
        keyboard = [[InlineKeyboardButton(project.name, callback_data=f"smart_goals_project_{project.id}")] for project in projects]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SMART-—Ü—ñ–ª–µ–π:", reply_markup=reply_markup)

    elif query.data == "generate_orders_file":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —ñ —Ä—ñ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ MM.YYYY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.2025):")
        return WAITING_FOR_DATE
        return WAITING_FOR_DATE
    
    elif query.data == "generate_tasks":
        logging.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞—Å–∫–∏'")
        projects = await get_projects()
        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç—ñ–≤")
        if not projects:
            await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤.")
            return
    
        keyboard = [[InlineKeyboardButton(project.name, callback_data=f"tasks_project_{project.id}")] for project in projects]
        reply_markup = InlineKeyboardMarkup(keyboard)
    
        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await query.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞—Å–æ–∫:", reply_markup=reply_markup)
    elif query.data.startswith("tasks_project_"):
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")  # –ú–∞—î –≤–∏–≤–µ—Å—Ç–∏ tasks_project_123
        project_id = int(query.data.split("_")[-1])
        logging.info(f"–û–±—Ä–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç: {project_id}")

        # –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∏ —î –¢–ó
        if await project_has_tz(project_id):
            logging.info("–ü—Ä–æ–µ–∫—Ç –º–∞—î –¢–ó, –ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–∞—Å–æ–∫")
            await handle_tasks_project(project_id, update, context)  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        else:
            logging.info("–¶–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–∞—î –¢–ó")
            await query.answer()
            await query.message.reply_text("–¶–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–∞—î —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó), —Ç–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—ñ.")

    


# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ï–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞ –∑ –æ—Ä–¥–µ—Ä–∞–º–∏
async def handle_date_input(update: Update, context):
    user_input = update.message.text.strip()

    # –û—á–∏—Å—Ç–∫–∞ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
    user_input = user_input.replace(" ", "")
    
    if not user_input or len(user_input) != 7 or user_input[2] != ".":
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ MM.YYYY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.2025). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return WAITING_FOR_DATE

    try:
        month, year = map(int, user_input.split("."))
        if not (1 <= month <= 12):
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –º—ñ—Å—è—Ü—è.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ MM.YYYY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01.2025). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return WAITING_FOR_DATE

    # –ü–æ—à—É–∫ –æ—Ä–¥–µ—Ä—ñ–≤ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –º—ñ—Å—è—Ü—å —Ç–∞ —Ä—ñ–∫
    orders = await sync_to_async(list)(NotionOrders.objects.filter(status="Done", finish_date__year=year, finish_date__month=month ))
    if not orders:
        await update.message.reply_text("‚ùå –î–∞–Ω–∏—Ö –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ–º–∞—î.")
        return ConversationHandler.END

    # –§–æ—Ä–º—É—î–º–æ Excel-—Ñ–∞–π–ª
    file_path = await generate_orders_excel(orders, month, year)
    await update.message.reply_document(document=open(file_path, "rb"), filename=os.path.basename(file_path))
    return ConversationHandler.END

async def generate_orders_excel(orders, month, year):
   
    df = pd.DataFrame.from_records([
        {
            "–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è": "–ù–∞–∑–≤–∞",
            "–ù–∞–∑–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∫–æ—Ä–æ—Ç–∫–æ —É 1 —Ä–µ—á–µ–Ω–Ω—ñ)": order.service_name,
            "–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è": f"{order.description + ',' or ''} {order.url_docs or ''}".strip(),
            "–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó, —â–æ –∑–∞–º–æ–≤–ª—è—î –ø–æ—Å–ª—É–≥—É (—É—Ç–æ—á–Ω–∏ —É —Å–≤–æ–≥–æ –°–ï–û)": order.business_project_pf,
            "–ù–∞–ø—Ä—è–º–æ–∫ Netpeak Core": order.team,
            "–¢–∏–ø —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥ –º—ñ–∂ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏ NG": order.cost_allocation_type,
            "–†–æ–∑–ø–æ–¥—ñ–ª –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏ –º—ñ–∂ –∫–æ–º–ø–∞–Ωi—è–º–∏ NG (–∫–æ–º–ø. –ê - n%, –∫–æ–º–ø. –í - n%, etc...)": order.cost_allocation,
            "–î–∞—Ç–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è": order.order_date.strftime("%d-%m-%Y") if order.finish_date else "",
            "–î–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤–∏–∫–æ–Ω–∞–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏": order.finish_date.strftime("%d-%m-%Y") if order.finish_date else "",
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è": order.get_responsible_pf_display(),
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö –ø–æ—Å–ª—É–≥ / –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏ –Ω–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º": order.hours_unit,
            "–°—Ç–∞—Ç—É—Å": "–ó–∞–≤–µ—Ä—à–µ–Ω–µ" if order.status == "Done" else order.status,
            "ID –ø–æ—Å–ª—É–≥–∏": order.service_id,
            "–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏": order.service_name,
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ—Å–ª—É–≥–∏": order.category,
            "–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è": order.order_cost,
            "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Docs": order.url_docs,
            "ID  –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ Notion": order.order_id,
            "ID  –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ Notion –Ω–æ–º–µ—Ä": order.order_id_num
        } for order in orders
    ])
    
    file_path = f"orders_{month:02d}_{year}.xlsx"
    df.to_excel(file_path, index=False)
    return file_path


async def handle_document(update: Update, context):
    document = update.message.document
    file = await context.bot.get_file(document.file_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    download_folder = os.path.join(os.getcwd(), "downloads")
    os.makedirs(download_folder, exist_ok=True)

    # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    file_path = os.path.join(download_folder, document.file_name)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    await file.download_to_drive(file_path)

    # –ü–∞—Ä—Å–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    extracted_text = await sync_to_async(parse_document)(file_path, document.file_name)

    # –Ø–∫—â–æ —Ñ–∞–π–ª Excel/CSV, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ JSON
    if document.file_name.endswith(".xlsx") or document.file_name.endswith(".csv"):
        extracted_text = f"–û—Å—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:\n{extracted_text}"

    # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç, —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π
    MAX_TOKENS = 15000  # –†–µ–∑–µ—Ä–≤ –∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
    extracted_text = extracted_text[:MAX_TOKENS]  

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
    telegram_user_id = str(update.message.from_user.id)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –¢–ó —á–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª
    if "selected_project" in context.user_data:
        project_id = context.user_data["selected_project"]
        direction = "project"
    else:
        project_id = None
        direction = "general"

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    await sync_to_async(TrainingMaterial.objects.create)(
        name=document.file_name,
        direction=direction,
        content=extracted_text,
        telegram_user_id=telegram_user_id,
        project_id=project_id,
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if direction == "project":
        await update.message.reply_text("–¢–ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ. AI –∞–Ω–∞–ª—ñ–∑—É—î –¥–æ–∫—É–º–µ–Ω—Ç...")
        chat_id = update.effective_chat.id
        AI_CONSULT_MODE.add(chat_id)
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –≤–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        chunk_size = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ GPT
        chunks = [extracted_text[i:i+chunk_size] for i in range(0, len(extracted_text), chunk_size)]

        analysis_results = []
        for chunk in chunks:
            analysis = await analyze_tz_with_ai(chunk)
            analysis_results.append(analysis)

        # –ó–±–∏—Ä–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
        final_analysis = "\n\n".join(analysis_results)
        await save_chat_history(chat_id, analysis_results, final_analysis)
        await update.message.reply_text(f"AI –≤—Ä–∞–∂–µ–Ω–Ω—è:\n{final_analysis[:4000]}")  # GPT –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

    else:
        await update.message.reply_text("–ù–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! ‚úÖ")



async def enable_ai_consult(update: Update, context: CallbackContext):
    """–ê–∫—Ç–∏–≤—É—î —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó AI –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏."""
    chat_id = update.effective_chat.id
    AI_CONSULT_MODE.add(chat_id)  # –î–æ–¥–∞—î–º–æ —á–∞—Ç —É —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó

    await update.callback_query.message.reply_text(
        "‚úÖ –í–∏ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó AI.\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≤–∞–º."
    )

async def handle_ai_consult(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó."""
    chat_id = update.effective_chat.id
    user_text = update.message.text if update.message else update.channel_post.text

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö
    if update.effective_chat.type in ["private", "group", "supergroup"]:
        AI_CONSULT_MODE.add(chat_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–æ–±–º–µ–∂–µ–Ω–Ω—è –≤ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö)
    context_history = await get_recent_context(chat_id, limit=10)  # <-- –î–æ–¥–∞–ª–∏ limit

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –ª—ñ–º—ñ—Ç
    if len(context_history) > 5000:  # –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π –ª—ñ–º—ñ—Ç (—Ä–µ–≥—É–ª—é—î—Ç—å—Å—è)
        context_history = context_history[-4000:]  # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 4000 —Å–∏–º–≤–æ–ª—ñ–≤

    # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç —ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    full_prompt = f"{context_history}\nUser: {user_text}\nAI:"

    # –Ø–∫—â–æ —á–∞—Ç —É —Ä–µ–∂–∏–º—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–≥–∞–¥–∫–∏
    if chat_id in AI_CONSULT_MODE:
        response = await ask_gpt_analysis(full_prompt)
        await save_chat_history(chat_id, user_text, response)
        await update.effective_message.reply_text(response)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–≥–∞–¥–∞–Ω–æ –±–æ—Ç–∞
    bot_username = (await context.bot.get_me()).username
    if f"@{bot_username}" in user_text:
        response = await ask_gpt_analysis(full_prompt)
        await save_chat_history(chat_id, user_text, response)
        await update.effective_message.reply_text(response)

def parse_document(file_path, file_name):
    if file_name.endswith(".docx"):
        doc = DocxDocument(file_path)
        return "\n".join([p.text for p in doc.paragraphs])
    elif file_name.endswith(".pdf"):
        reader = PdfReader(file_path)
        return "\n".join([page.extract_text() for page in reader.pages])
    elif file_name.endswith(".xlsx") or file_name.endswith(".csv"):
        df = pd.read_excel(file_path) if file_name.endswith(".xlsx") else pd.read_csv(file_path)
        return df.to_json(orient="records", force_ascii=False)
   
    return "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç"



async def analyze_tz_with_ai(text):
    max_tokens = 3000  # –õ—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –∑–∞–ø–∏—Ç
    encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–∫–µ–Ω—ñ–∑–∞—Ç–æ—Ä OpenAI

    paragraphs = text.split("\n")  # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü–∏
    parts = []
    current_part = []
    current_tokens = 0

    for paragraph in paragraphs:
        paragraph_tokens = len(encoding.encode(paragraph))  # –†–∞—Ö—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –≤ –∞–±–∑–∞—Ü—ñ

        if current_tokens + paragraph_tokens > max_tokens:
            if current_part:
                parts.append("\n".join(current_part))  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —á–∞—Å—Ç–∏–Ω—É
            current_part = [paragraph]  # –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤—É —á–∞—Å—Ç–∏–Ω—É
            current_tokens = paragraph_tokens
        else:
            current_part.append(paragraph)
            current_tokens += paragraph_tokens

    if current_part:
        parts.append("\n".join(current_part))  # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ –¥–æ GPT —ñ –∑–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results = []
    for part in parts:
        response = await ask_gpt_analysis(part)
        results.append(response)

    return "\n\n".join(results)


async def ask_gpt_analysis(question):
    openai.api_key = OPENAI_API_KEY
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢–∏ ‚Äì –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ø—Ä–æ—î–∫—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ –º–µ—Ç–∞ ‚Äì –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ, –∞–Ω–∞–ª—ñ–∑—ñ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ –ø—Ä–æ—î–∫—Ç–∞–º–∏. –¢–∏ –∞–Ω–∞–ª—ñ–∑—É—î—à —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó), —Ñ–æ—Ä–º—É—î—à SMART-—Ü—ñ–ª—ñ, –ø—Ä–æ–ø–æ–Ω—É—î—à –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, –æ—Ü—ñ–Ω—é—î—à —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ä–∏–∑–∏–∫–∏ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä—ñ—à–µ–Ω—å.–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞–¥–∞–π —á—ñ—Ç–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥–∏–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç–∞–º–∏ (PMBOK, Agile, Scrum, Kanban) —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ (ROI, NPV, —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–µ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è). –Ø–∫—â–æ –∞–Ω–∞–ª—ñ–∑—É—î—à –¢–ó, –∑–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞:‚úÖ –õ–æ–≥—ñ–∫—É, —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å —ñ —á—ñ—Ç–∫—ñ—Å—Ç—å –≤–∏–º–æ–≥, ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å SMART-—Ü—ñ–ª—è–º, ‚úÖ –§—ñ–Ω–∞–Ω—Å–æ–≤—É –¥–æ—Ü—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —Ä–∏–∑–∏–∫–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ, –±–µ–∑ –∑–∞–π–≤–æ—ó –≤–æ–¥–∏, –æ—Ä—ñ—î–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ‚Äì –∑–∞–ø–∏—Ç—É–π –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.."},
            {"role": "user", "content": question}
        ]
    )
    return response["choices"][0]["message"]["content"].strip()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –∑–∞ ID
@sync_to_async
def get_tz_for_project(project_id: int):
    try:
        return list(TrainingMaterial.objects.filter(project_id=project_id))
    except Exception as e:
        logging.error(f"Error getting TZ for project {project_id}: {e}")
        return []

@sync_to_async
def get_project_by_id(project_id: int):
    try:
        return Project.objects.get(id=project_id)
    except Project.DoesNotExist:
        return None
    except Exception as e:
        logging.error(f"Error getting project {project_id}: {e}")
        return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¢–ó –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
async def project_has_tz(project_id: int) -> bool:
    logging.info(f"–û—Ç—Ä–∏–º—É—î–º–æ –¢–ó –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_id}")
    tz_list = await get_tz_for_project(project_id)
    return len(tz_list) > 0

# –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è SMART —Ü—ñ–ª–µ–π
async def smart_goals_handler(update: Update, context: CallbackContext):
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        callback_data = update.callback_query.data

        if callback_data.startswith('smart_goals_project_'):
            project_id = int(callback_data.split('_')[-1])

            if await project_has_tz(project_id):
                await update.callback_query.answer()
                await handle_smart_goals_for_project(project_id, update, context)
            else:
                await update.callback_query.answer()
                await context.bot.send_message(
                    user_id, 
                    "–¶–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–∞—î —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó), —Ç–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ SMART —Ü—ñ–ª—ñ."
                )
    
    elif update.message:
        user_id = update.message.from_user.id
        projects = await sync_to_async(list)(Project.objects.all())
        keyboard = [
            [InlineKeyboardButton(project.name, callback_data=f"smart_goals_project_{project.id}")] 
            for project in projects
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è SMART —Ü—ñ–ª–µ–π:", 
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ SMART —Ü—ñ–ª–µ–π –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
async def handle_smart_goals_for_project(project_id: int, update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    project = await get_project_by_id(project_id)
    if not project:
        await update.callback_query.message.reply_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    tz_list = await get_tz_for_project(project_id)
    if not tz_list:
        await update.callback_query.message.reply_text(
            "–î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É –Ω–µ–º–∞—î –¢–ó. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è."
        )
        return

    # –û–±'—î–¥–Ω—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫—ñ–ª—å–∫–æ—Ö –¢–ó
    extracted_text = "\n\n".join([tz.content for tz in tz_list])
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¢–ó: {extracted_text[:200]}")

    # –§–æ—Ä–º—É–ª—é—î–º–æ SMART-—Ü—ñ–ª—ñ
    chunk_size = 3000  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è GPT
    max_chunks = 5  # –û–±–º–µ–∂–∏–º–æ –¥–æ 5 —á–∞—Å—Ç–∏–Ω, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–≤–∏—Å–∞–Ω–Ω—è
    chunks = [extracted_text[i:i+chunk_size] for i in range(0, min(len(extracted_text), chunk_size * max_chunks), chunk_size)]
    smart_goals_parts = []
    await update.callback_query.message.reply_text(
            "–ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä—ñ—à–µ—á–∫–∏ —è –∞–Ω–∞–ª—ñ–∑—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Å–º–∞—Ä—Ç —Ü—ñ–ª–µ–π"
        )
    for i, chunk in enumerate(chunks):
        logging.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω—É {i+1}/{len(chunks)}...")
        
        start_time = time.time()
        smart_goals = await generate_smart_goals(chunk)
        elapsed_time = time.time() - start_time

        logging.info(f"–ß–∞—Å—Ç–∏–Ω–∞ {i+1} –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∑–∞ {elapsed_time:.2f} —Å–µ–∫.")
        smart_goals_parts.append(smart_goals)

        await asyncio.sleep(0.5)  # –î–æ–¥–∞—î–º–æ –ø–∞—É–∑—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    final_smart_goals = "\n\n".join(smart_goals_parts)
    logging.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ SMART-—Ü—ñ–ª—ñ (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {final_smart_goals[:200]}")
    
    await save_chat_history(chat_id, extracted_text, final_smart_goals)
    await update.callback_query.message.reply_text(
        f"SMART —Ü—ñ–ª—ñ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É '{project.name}':\n\n{final_smart_goals[:4000]}"  # –õ—ñ–º—ñ—Ç —É Telegram
    )
    

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó SMART —Ü—ñ–ª–µ–π —á–µ—Ä–µ–∑ GPT
async def generate_smart_goals(tz_text):
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–µ –¢–µ—Ö–Ω—ñ—á–Ω–µ –ó–∞–≤–¥–∞–Ω–Ω—è (–¢–ó) —ñ —Å—Ñ–æ—Ä–º—É–ª—é–π SMART —Ü—ñ–ª—ñ:

    –¢–ó: {tz_text}

    –ü–æ—è—Å–Ω–∏, —è–∫—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ SMART —Ü—ñ–ª—ñ –º–æ–∂–Ω–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ –¢–ó. 
    –ö–æ–∂–Ω–∞ –æ–∫—Ä–µ–º–∞ SMART —Ü—ñ–ª—å –ø–æ–≤–∏–Ω–Ω–∞ –≤–∫–ª—å—á–∞—Ç–∏ –≤ —Å–µ–±–µ:
    - Specific (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ)
    - Measurable (–≤–∏–º—ñ—Ä–Ω—ñ)
    - Achievable (–¥–æ—Å—è–∂–Ω—ñ)
    - Relevant (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ)
    - Time-bound (—Å—Ç—Ä–æ–∫–æ–≤—ñ)
    """
    smart_goals_response = await ask_gpt(prompt)
    return smart_goals_response

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ GPT
async def ask_gpt(prompt: str) -> str:
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è SMART —Ü—ñ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"Error with GPT request: {e}")
        return "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ GPT. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."


# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–∑–º–æ–≤–∏ –∑ –ê–Ü –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
async def save_chat_history(user_id, user_message, ai_response):
    session_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Å–µ—Å—ñ—ó (–º–æ–∂–Ω–∞ –≥—Ä—É–ø—É–≤–∞—Ç–∏ –∑–∞ —á–∞—Å–æ–º)
    
    await sync_to_async(ChatHistory.objects.create)(
        user_id=user_id,
        session_id=session_id,
        message=user_message,
        response=ai_response
    )

def get_chat_history(user_id, limit=10):
    return ChatHistory.objects.filter(user_id=user_id).order_by('-timestamp')[:limit]

async def get_recent_context(user_id, limit=5):
     """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI."""
     history = await sync_to_async(
        lambda: list(ChatHistory.objects.filter(user_id=user_id).order_by('-timestamp')[:limit])
    )()
     context = "\n".join([f"User: {h.message}\nAI: {h.response}" for h in reversed(history)])
     return context



# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ê–Ü —Ç–∞—Å–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –ø–æ –¢–ó

async def task_handler(update: Update, context: CallbackContext):
    logging.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_id}")
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        callback_data = update.callback_query.data
        logging.info(f"Callback data –æ—Ç—Ä–∏–º–∞–Ω–æ: {callback_data}")

        if callback_data.startswith('tasks_project_'):
            project_id = int(callback_data.split('_')[-1])

            if await project_has_tz(project_id):
                await update.callback_query.answer()
                await handle_tasks_project(project_id, update, context)
            else:
                await update.callback_query.answer()
                await context.bot.send_message(
                    user_id, 
                    "–¶–µ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–∞—î —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó), —Ç–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ SMART —Ü—ñ–ª—ñ."
                )
    
    elif update.message:
        user_id = update.message.from_user.id
        projects = await sync_to_async(list)(Project.objects.all())
        keyboard = [
            [InlineKeyboardButton(project.name, callback_data=f"tasks_project_{project.id}")] 
            for project in projects
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è Tasks and parent tasks:", 
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ tasks –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
async def parse_and_save_tasks(project_id, tasks_text):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–µ–Ω—Ç—ñ–≤ —Ç–∞ —Ç–∞—Å–æ–∫"""
    await sync_to_async(_parse_and_save_tasks_sync)(project_id, tasks_text)

def _parse_and_save_tasks_sync(project_id, tasks_text):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–µ–Ω—Ç—ñ–≤ —Ç–∞ —Ç–∞—Å–æ–∫"""
    with transaction.atomic():
        project = Project.objects.get(id=project_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—î–∫—Ç

        parent_blocks = re.split(r"\*\*Parent Task \d+:\*\*", tasks_text)[1:]

        for parent_text in parent_blocks:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
            parent_text = parent_text.strip()

            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —è–∫ –Ω–∞–∑–≤—É –ø–∞—Ä–µ–Ω—Ç —Ç–∞—Å–∫–∏
            lines = parent_text.split("\n")
            parent_title = lines[0].strip("* ").strip()

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–µ–Ω—Ç —É –±–∞–∑—É
            parent_task = Parent.objects.create(name=parent_title, project=project)

            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–∞—Å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø–∞—Ä–µ–Ω—Ç–∞
            task_matches = re.findall(r"- Task \d+: (.+?), (\d+) –≥–æ–¥–∏–Ω, #(\d+)", parent_text)

            for task_description, hours, task_id in task_matches:
                AIgenTask.objects.create(
                    name=task_description.strip(),  # –ù–∞–∑–≤–∞ —Ç–∞—Å–∫–∏
                    parent_task=parent_task,  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –ø–∞—Ä–µ–Ω—Ç–∞
                    project=project,  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –ø—Ä–æ—î–∫—Ç—É
                    hours_plan=float(hours),  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç–∏ –≥–æ–¥–∏–Ω–∏ –æ–∫—Ä–µ–º–æ
                    status="Backlog",  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Å—Ç–∞—Ç—É—Å
                    plan_cost=None,  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç–∏ —Ü—ñ–Ω—É –æ–∫—Ä–µ–º–æ
                    order=int(task_id),  # –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä
                )

async def handle_tasks_project(project_id: int, update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    project = await get_project_by_id(project_id)
    if not project:
        await update.callback_query.message.reply_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    tz_list = await get_tz_for_project(project_id)
    if not tz_list:
        await update.callback_query.message.reply_text(
            "–î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É –Ω–µ–º–∞—î –¢–ó. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¢–ó –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è."
        )
        return

    # –û–±'—î–¥–Ω—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫—ñ–ª—å–∫–æ—Ö –¢–ó
    extracted_text = "\n\n".join([tz.content for tz in tz_list])
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¢–ó: {extracted_text[:200]}")

    # –§–æ—Ä–º—É–ª—é—î–º–æ tasks
    chunk_size = 4000  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è GPT
    max_chunks = 5  # –û–±–º–µ–∂–∏–º–æ –¥–æ 5 —á–∞—Å—Ç–∏–Ω, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–≤–∏—Å–∞–Ω–Ω—è
    chunks = [extracted_text[i:i+chunk_size] for i in range(0, min(len(extracted_text), chunk_size * max_chunks), chunk_size)]
    tasks_parts = []
    await update.callback_query.message.reply_text(
            "–ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä—ñ—à–µ—á–∫–∏ —è –∞–Ω–∞–ª—ñ–∑—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –¢–∞—Å–æ–∫"
        )
    for i, chunk in enumerate(chunks):
        logging.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω—É {i+1}/{len(chunks)}...")
        
        start_time = time.time()
        tasks = await generate_tasks(chunk)
        elapsed_time = time.time() - start_time

        logging.info(f"–ß–∞—Å—Ç–∏–Ω–∞ {i+1} –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∑–∞ {elapsed_time:.2f} —Å–µ–∫.")
        tasks_parts.append(tasks)

        await asyncio.sleep(0.5)  # –î–æ–¥–∞—î–º–æ –ø–∞—É–∑—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    final_tasks = "\n\n".join(tasks_parts)
    logging.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ç–∞—Å–∫–∏ (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {final_tasks[:200]}")
    
    # await save_chat_history(chat_id, extracted_text, final_tasks)
    await parse_and_save_tasks(project_id, final_tasks)  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    await send_tasks_in_parts(chat_id, project.name, final_tasks, context)
    # await update.callback_query.message.reply_text(
    #     f"–û—Å—å —Ç–∞—Å–∫–∏ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É '{project.name}':\n\n{final_tasks[:4000]}"  # –õ—ñ–º—ñ—Ç —É Telegram
    # )

async def send_tasks_in_parts(chat_id, project_name, tasks_text, context):
    """–†–æ–∑–±–∏–≤–∞—î —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–æ–∫ –Ω–∞ Parent Tasks —ñ –Ω–∞–¥—Å–∏–ª–∞—î —ó—Ö —É Telegram"""
    
    parent_tasks = re.split(r"\*\*Parent Task \d+:", tasks_text)[1:]  # –†–æ–∑–¥—ñ–ª—è—î–º–æ Parent Tasks
    logging.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å Parent Tasks: {len(parent_tasks)}")

    for idx, parent in enumerate(parent_tasks):
        message = f"**Parent Task {idx+1}:** {parent.strip()}"

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –¥–æ–≤–∂–∏–Ω–∞ –±—ñ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
        for part in [message[i:i+4000] for i in range(0, len(message), 4000)]:
            await context.bot.send_message(chat_id, part)
            await asyncio.sleep(1)  # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
    

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó tasks
async def generate_tasks(tz_text):
    prompt = f"""
    –û—Å—å —Ç–µ—Ö–Ω—ñ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–¢–ó) –¥–ª—è –ø—Ä–æ—î–∫—Ç—É. –í–∏–¥—ñ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ñ –≤–µ–ª–∏–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (Parent Tasks) —Ç–∞ –¥—Ä—ñ–±–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è (Tasks).
    –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å Parent Tasks 7 —à—Ç—É–∫, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ 12 —à—Ç.
    –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å Tasks 150 —à—Ç—É–∫. 

    –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ –Ω–∞–∑–≤–∏ —Ç–∞—Å–∫–∏ —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–π —Ç–∞–∫ —è–∫ –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

    üîπ –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
    **Parent Task 1:** –ù–∞–∑–≤–∞ –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        - Task 1: –û–ø–∏—Å, –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏
        - Task 2: –û–ø–∏—Å, –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏
        - Task N: –û–ø–∏—Å, –û–ø–∏—Å, –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏

        **Parent Task 2:** –ù–∞–∑–≤–∞ –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        - Task 1: –û–ø–∏—Å, –û–ø–∏—Å, –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏
        - Task 2: –û–ø–∏—Å, –û–ø–∏—Å, –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏
        - Task N: –û–ø–∏—Å, –û–ø–∏—Å, –ø–ª–∞–Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞—Å–∫–∏

    –¢–ó: {tz_text}

    """
    smart_goals_response = await ask_gpt_tasks(prompt)
    return smart_goals_response

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ GPT
async def ask_gpt_tasks(prompt: str) -> str:
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–Ω–∏—Ö —Ç–∞—Å–æ–∫ —ñ –ø–∞—Ä–µ–Ω—Ç—ñ–≤ –¥–ª—è –Ω–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å. –ú—ñ–Ω—ñ–º—É–º —Ç–∞—Å–æ–∫ 150 —à—Ç—É–∫"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=4000
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"Error with GPT request: {e}")
        return "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ GPT. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."



def main():
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_new_project, pattern="^create_new_project$")],
        states={
            WAITING_PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_project_name)]
        },
        fallbacks=[],
    )
    conv_handler_btn = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern="^(?!smart_goals_project_).*")],
    states={
        WAITING_FOR_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_input)],
    },
    fallbacks=[],
)
    


    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(conv_handler)
    application.add_handler(conv_handler_btn)
    # application.add_handler(conv_handler_tasks)
    application.add_handler(CommandHandler("start", start))
    # application.add_handler(CallbackQueryHandler(button_handler, pattern="^(?!smart_goals_project_).*"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_consult))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(CallbackQueryHandler(smart_goals_handler, pattern="^smart_goals_project_"))
    application.add_handler(CallbackQueryHandler(handle_smart_goals_for_project, pattern="^smart_goals_project_"))
    application.add_handler(CallbackQueryHandler(task_handler, pattern="^tasks_project_"))
    
    
    
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex("^.*$"), 
        handle_ai_consult
    ))
    application.add_handler(CallbackQueryHandler(enable_ai_consult, pattern="^consult_ai$"))
    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –∑–≥–∞–¥–æ–∫ –±–æ—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(f"{BOT_USERNAME}"), handle_mention))
    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å—Ç—ñ–≤ —É –∫–∞–Ω–∞–ª—ñ
    application.add_handler(MessageHandler(filters.ChatType.CHANNEL, send_menu_to_channel))
    application.run_polling()

if __name__ == "__main__":
    main()