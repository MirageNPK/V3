import logging
from django.utils.timezone import now
from sync_project.celery import app
from nontion_sync.models import Task, Project
from AI_assistants.bot_utils import send_message_to_topic_sync

logger = logging.getLogger(__name__)

@app.task
def send_task_reminders():
    """–§–æ—Ä–º—É—î —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–æ–∫ —ñ –Ω–∞–¥—Å–∏–ª–∞—î –≤ Telegram-—Ç–æ–ø—ñ–∫–∏ –ø–æ –ø—Ä–æ—î–∫—Ç–∞—Ö"""
    active_statuses = ["In progress", "To Do", "Need fix", "Review"]
    tasks = Task.objects.filter(status__in=active_statuses).order_by("project", "person", "finish")

    if not tasks.exists():
        return  # –ù–µ–º–∞—î —Ç–∞—Å–æ–∫ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    grouped_tasks = {}

    for task in tasks:
        if not task.person or task.person.strip() == "Unknown Person":
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–∞—Å–∫–∏ –∑ –Ω–µ–≤—ñ–¥–æ–º–∏–º –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º

        project = Project.objects.filter(project_id=task.project).first()  # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø—Ä–æ—î–∫—Ç—É –∑–∞ `project`
        if not project or project.telegram_topik_id == 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–∞—Å–∫–∏ –±–µ–∑ –ø—Ä–æ—î–∫—Ç—É –∞–±–æ –±–µ–∑ —Ç–æ–ø—ñ–∫–∞

        if project.project_id not in grouped_tasks:
            grouped_tasks[project.project_id] = {"topic_id": project.telegram_topik_id, "tasks": {}}

        if task.person not in grouped_tasks[project.project_id]["tasks"]:
            grouped_tasks[project.project_id]["tasks"][task.person] = []

        overdue = "üî¥ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞" if task.finish and task.finish < now().date() else "üü¢ –í –º–µ–∂–∞—Ö –≥—Ä–∞—Ñ—ñ–∫—É"

        # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω–∫ —É –Ω–∞–∑–≤—É —Ç–∞—Å–∫–∏
        task_name_with_link = f"[{task.name}]({task.task_url})" if task.task_url else task.name

        grouped_tasks[project.project_id]["tasks"][task.person].append(
            f"üìå {task_name_with_link} (üïí {task.hours_plan or 0} –≥–æ–¥ / DDL {task.finish.strftime('%d.%m.%Y') if task.finish else '‚Äî'} / {task.status} / {overdue})"
        )

    for project_id, data in grouped_tasks.items():
        topic_id = data["topic_id"]
        message = f"üì¢ *–ü–ª–∞–Ω–æ–≤—ñ —Ç–∞—Å–∫–∏ –ø–æ –ø—Ä–æ—î–∫—Ç—É –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:* \n______\n"

        for person, task_list in data["tasks"].items():
            message += f"\nüë§ @{person}\n" + "\n".join(task_list) + "\n______\n"

        send_message_to_topic_sync(topic_id, message)
